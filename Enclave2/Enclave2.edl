/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave2.edl - Top EDL file. */

enclave
{
  /* Include the generated header file for the ECALLs. */
  include "sgx_tseal.h"
  include "sgx_dh.h"

  /* Import ECALL/OCALL from sub-directory EDLs.
   *  [from]: specifies the location of EDL file. 
   *  [import]: specifies the functions to import, 
   *  [*]: implies to import all functions.
   */

  trusted
  {

    public sgx_status_t e2_seal([in, size=plaintext_len]uint8_t* plaintext, uint32_t plaintext_len, [out, size=sealed_size]sgx_sealed_data_t* sealed_data, uint32_t sealed_size);
    public sgx_status_t e2_unseal([in, size=sealed_size]sgx_sealed_data_t* sealed_data, uint32_t sealed_size, [out, size=plaintext_len]uint8_t* plaintext, uint32_t plaintext_len);
    public uint32_t e2_get_unsealed_data_size([in, size=sealed_data_size] uint8_t* sealed_data, uint32_t sealed_data_size);
    public uint32_t e2_get_sealed_data_size(uint32_t plaintext_len);

    public void e2_check_password([in, size=password_size] const uint8_t *password, uint32_t password_size, [in, size=sealed_size] const uint8_t *sealed_data, uint32_t sealed_size, [out] int *result);
    public void e2_list_all_assets([in, size=sealed_size] const uint8_t *sealed_data, uint32_t sealed_size);

    public void e2_init_session([out] sgx_status_t *dh_status);
    public void e2_create_message1([out] sgx_dh_msg1_t *msg1,[out] sgx_status_t *dh_status);
    public void e2_process_message2([in] const sgx_dh_msg2_t *msg2,[out] sgx_dh_msg3_t *msg3,[out] sgx_status_t *dh_status);
    public void e2_show_secret_key(void);
    public void e2_decipher_and_seal([in, size=ciphertext_size] const uint8_t *ciphertext, uint32_t ciphertext_size, [in, size=password_size] const uint8_t *password, uint32_t password_size, [out, size=sealed_size] uint8_t *sealed_data, uint32_t sealed_size);
  };
  untrusted
  {
    void ocall_e2_print_string([in, string] const char *str);
  };
};
